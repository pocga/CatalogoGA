<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f6296d33-7bb4-4f9b-b216-8cc42dffc3ca" activeEnvironment="Default" name="ProductosMock" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="60caf204-a941-451f-bbe0-9306b593203b" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8085" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://SBMEDLAPPRODQ2:8089/</con:endpoint><con:endpoint>http://localhost:8087</con:endpoint></con:endpoints><con:resource name="ProductosMock" path="/ProductosMock/AllProductos" id="16464820-95f4-487c-a5f5-e0b56d793432"><con:settings/><con:parameters/><con:method name="ProductosMock 1" id="3dc19a20-ea07-4978-b65c-a21c4fc82ef9" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="61dff83a-c4ce-4f70-979c-f281e110f171" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8085</con:endpoint><con:request/><con:originalUri>http://localhost/ProductosMock/AllProductos</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="1a8d28ed-7c65-4839-8245-5dfea25fd86f" port="8085" path="/" host="SBMEDLAPPRODQ2" name="ProductosResponse" docroot=""><con:settings/><con:properties/><con:onRequestScript/><con:restMockAction name="/IdProductos" method="GET" resourcePath="/IdProductos" id="801fc320-1a6a-40ec-b66d-5d1af3753cfa"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>import javax.xml.xpath.*
import groovy.xml.StreamingMarkupBuilder
import groovy.lang.Binding;
import groovy.lang.Script;

def util = new com.eviware.soapui.support.GroovyUtils( context )
//def xml = new XmlSlurper().parseText(mockRequest.requestContent)

//context.idProducto = mockRequest.getHttpRequest().getParameter ("idProducto")
def idProducto = 10

if(mockRequest == null ){
	context.ResultResponse="400"
}

if(idProducto != null ){
 context.ResultResponse = "200"

} 
else if(idProducto == null){
 context.ResultResponse="400"

}
</con:dispatchPath><con:response name="200" id="03141bc1-df4e-4454-b7e7-0ae545741de6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"message": "successful operation", "number": 1, "producto": 
 [
 	{"idProducto":"T3600543A",
	"categoria":"TV",
	"cantidadDisponible":"10",
	"precio":"4000000",
	"descripcion":" Tecnologia LED.Resolucion 4K Ultra HD.Tamaño de la pantalla 55",
	"miniatura": "",
	"imagen": ""					
		} 					
		]              
 } 
 </con:responseContent></con:response><con:response name="400" id="53c3c0fc-5829-4cd7-aa1d-b43509cd9fe8" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:responseContent>{"message": "successful operation", "response":"404", "description": "Producto no encontrado" }
	</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/AllProductos" method="GET" resourcePath="/AllProductos" id="7e051d89-8d08-43e5-8dd0-7a2f19546e9d"><con:settings/><con:defaultResponse>200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="200" id="c4952cb0-46bc-46c6-b03c-519a7d5bb582" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"message": "successful operation", "number": 23, "producto": 
 [
 {
"idProducto":"T3600543",
"categoria":"TV",
"cantidadDisponible":"10",
"precio":"4000000",
"descripcion":" Tecnologia LED.Resolucion 4K Ultra HD.Tamaño de la pantalla 55",
"miniatura":"",
"imagen":""
}, 
{
"idProducto":"T3600544",
"categoria":"TV",
"cantidadDisponible":"5",
"precio":"4200000",
"descripcion":" Tamaño de la pantalla 59.Resolucion 4K Ultra HD.Tecnologia LED.Modelo 55UK6200PDA",
"miniatura":"",
"imagen":""
}, 
{
"idProducto":"T3600545",
"categoria":"TV",
"cantidadDisponible":"8",
"precio":"1849000",
"descripcion":"Tecnologia LED.Resolucion Full HD.Tamaño de la pantalla 43",
"miniatura":"",
"imagen":""
}, 
{
"idProducto":"T3600546",
"categoria":"TV",
"cantidadDisponible":"3",
"precio":"11900000",
"descripcion":"Tecnologia Smart TV.Resolucion 4K Ultra HD.Tamaño de la pantalla 65 pulgadas",
"miniatura":"",
"imagen":""
}, 
{
"idProducto":"T3600547",
"categoria":"TV",
"cantidadDisponible":"6",
"precio":"9000000",
"descripcion":"Tecnologia Smart TV.Resolucion 4K Ultra HD.Tamaño de la pantalla 70 pulgadas",
"miniatura":"",
"imagen":""
}, 
{
"idProducto":"T3600548",
"categoria":"TV",
"cantidadDisponible":"7",
"precio":"8999999",
"descripcion":"OLED.Resolucion: 4K Ultra HD.Tamaño de la pantalla: 65",
"miniatura":"",
"imagen":""
}, 
{
"idProducto":"T3600549",
"categoria":"TV",
"cantidadDisponible":"0",
"precio":"2699900",
"descripcion":"Tecnologia Smart TV.Resolucion 4K Ultra HD.Tamaño de la pantalla 52 pulgadas",
"miniatura":"",
"imagen":""
}, 
{
"idProducto":"T3600550",
"categoria":"TV",
"cantidadDisponible":"0",
"precio":"799900",
"descripcion":"Tecnologia LED.Modelo LE32S5970I.Tipo Televisores 32 pulg.Tasa de refresco nativa 60",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"T3600551",
"categoria":"TV",
"cantidadDisponible":"0",
"precio":"2399990",
"descripcion":"Tecnologia Smart TV2.Resolucion 4K Ultra HD.Pnatalla de 50",
"miniatura":"",
"imagen":""
}, 
{
"idProducto":"C001",
"categoria":"Celulares",
"cantidadDisponible":"10",
"precio":"2259000",
"descripcion":"iPhone 8 , Soporta carga inhalambrica, Pantalla : 4.7",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"C002",
"categoria":"Celulares",
"cantidadDisponible":"0",
"precio":"3000000",
"descripcion":"Apple iPhone x , Pantalla : 5.8",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"C003",
"categoria":"Celulares",
"cantidadDisponible":"20",
"precio":"819900",
"descripcion":"Huawei P10 Pantalla : Pantalla IPS Full HDSistema Operativo Android",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"C004",
"categoria":"Celulares",
"cantidadDisponible":"0",
"precio":"773900",
"descripcion":"Huawei p20 lite ,Dimensiones:77,1x162,4x8,05mm ",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"C005",
"categoria":"Celulares",
"cantidadDisponible":"25",
"precio":"679900",
"descripcion":"Samsung J8 GSM/GPRS/EDGE/HSDPA/HSUPA/HSPA+/LTESistema Operativo: Android ",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"C006",
"categoria":"Celulares",
"cantidadDisponible":"30",
"precio":"1899900",
"descripcion":"Samsung S9 Pantalla : 5.8 Procesador: Exinos 9810 octa-core ",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"P001",
"categoria":"Portátiles",
"cantidadDisponible":"25",
"precio":"1569900",
"descripcion":" 7ª generación del procesador Intel® Core™ i5 - Memoria Ram: 8GB, DDR4, 2400MHz,
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"P002",
"categoria":"Portátiles",
"cantidadDisponible":"15",
"precio":"6840890",
"descripcion":" Procesador Intel Core 8th Generation i78550U (Quad Core, hasta 40 GHz, 8M Cache)",
"miniatura":"",
"imagen":""
}, 
{
"idProducto":"P003",
"categoria":"Portátiles",
"cantidadDisponible":"0",
"precio":"1896777",
"descripcion":"Portátil Generación de Intel Core i3-4005U (1.7 GHz, 3MB de caché L3, 2 núcleos)",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"P004",
"categoria":"Portátiles",
"cantidadDisponible":"14",
"precio":"1599700",
"descripcion":"Portátil Sistema Operativo - LINUX - Procesador - Intel® Core™ i5-7200U ",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"P005",
"categoria":"Portátiles",
"cantidadDisponible":"5",
"precio":"2920040",
"descripcion":"Portátil Disco duro de 1TB , Procesador Intel Core i5. 12GB de RAM DDR4",
"miniatura":"",
"imagen":"" 
}, 
{
"idProducto":"P006",
"categoria":"Portátiles",
"cantidadDisponible":"0",
"precio":"6884295",
"descripcion":"Portátil Pantalla 13 pulgadas FullHD15 pulgadas FullHD- Procesador:Intel Core de octava generación",
"miniatura":"",
"imagen":"" 
} ]              
 }
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/AllCategorias" method="GET" resourcePath="/AllCategorias" id="6ea30222-f5ed-48bf-99b9-0a60598fc0b2"><con:settings/><con:defaultResponse>200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="200" id="8a7e4e4a-76fc-47da-a841-4d71f21659f3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"message": "success", "number": 3, "categorias": 
 [{"categoria":"Celulares"},{"categoria":"Televisores"},{"categoria":"Portatiles"} ]	              
 }
 </con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>